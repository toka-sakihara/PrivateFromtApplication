<!--参考 https://docs.microsoft.com/ja-jp/aspnet/core/blazor/forms-validation?view=aspnetcore-3.1 -->
@page "/register"
@using Systemsnow.Study.AccountManager.Model
@using Systemsnow.Study.AccountManager.Data
@using System.Net.Http.Json
@using Microsoft.Extensions.Configuration;
@using System.ComponentModel.DataAnnotations;
@using System.Net;
@using Systemsnow.Study.AccountManager.Validation;
@using Systemsnow.Study.AccountManager.Shared.AccountList;
@inject HttpClient httpClient
<h1>アカウント登録</h1>

<EditForm Model="@accountModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <ValidationSummary />
        アカウントID<br />
        <InputText id="text" @bind-Value="accountModel.UserId" disabled="@disabled" />
        <CustomValidation @ref="CustomValidation" />
        <br />

        苗字<br />
        <InputText id="text" @bind-Value="accountModel.LastName" disabled="@disabled" />
        <br />

        名前<br />
        <InputText id="text" @bind-Value="accountModel.FirstName" disabled="@disabled" />
        <br />
        趣味<br />
        <InputText id="text" @bind-Value="hobbyName" disabled="@disabled" />
        <button type="button" class="btn-secondary btn" disabled="@disabled" @onclick="AddHobbyList">追加</button>

                <table>
                    @foreach (var hobby in accountModel.Hobby)
                    {
                    <tr>
                        <td>・@hobby</td>
                        <td><button type="button" class="btn btn-light alert-danger" disabled="@disabled" @onclick="@(e => RemoveHobbyList(hobby))">削除</button></td>
                    </tr>
                        
                    }
                </table>

                <br />

                <button type="submit" class="col-sm-2 btn btn-primary" disabled="@disabled">登録</button>
                <p style="@messageStyles">
                    @message
                </p>
                    @if (message == "ユーザー登録が完了しました。")
                    {
                        <AccountRegistedTable accountDto="@accountModel.GetAccountDto()"/>
                    }
</EditForm>

@code {
    private bool disabled;
    private string message;
    private string hobbyName;
    private CustomValidation CustomValidation;
    private AccountModel accountModel = new AccountModel() { Hobby = new List<string>()};
    private string messageStyles = "visibility:hidden";

    private void HandleValidSubmit()
    {
        CustomValidation.ClearErrors();

        var errors = CheckRegistedUserId(accountModel.UserId);
        if (errors.Count > 0)
        {
            CustomValidation.DisplayErrors(errors);
        }
        else
        {
            try
            {
                // アカウント登録リクエスト
                httpClient.PostAsJsonAsync($"account", accountModel);

                disabled = true;
                messageStyles = "color:green";
                message = "ユーザー登録が完了しました。";
            }
            catch
            {
                messageStyles = "color:red";
                message = "登録処理でエラーが発生しました。";
            }
        }
    }

    private Dictionary<string, List<string>> CheckRegistedUserId(string userId)
    {
        Dictionary<string, List<string>> errors = new Dictionary<string, List<string>>();
        var response = httpClient.GetAsync($"account/{userId}");
        if (response.Result.StatusCode == HttpStatusCode.OK)
        {
            errors.Add(nameof(accountModel.UserId), new List<string> { $"ユーザーID:{accountModel.UserId}はすでに使用されています。" });
        }
        return errors;
    }

    private void AddHobbyList()
    {
        Dictionary<string, List<string>> errors = new Dictionary<string, List<string>>();
        CustomValidation.ClearErrors();
        if (string.IsNullOrWhiteSpace(this.hobbyName))
        {
            errors.Add(nameof(this.hobbyName), new List<string> { $"1文字以上必要です。" });
            CustomValidation.DisplayErrors(errors);
        }
        else if (accountModel.Hobby.Contains(this.hobbyName))
        {
            errors.Add(nameof(this.hobbyName), new List<string> { $"{this.hobbyName}はすでに追加されています。" });
            CustomValidation.DisplayErrors(errors);
        }
        else
        {
            this.accountModel.Hobby.Add(this.hobbyName);
            this.hobbyName = string.Empty;
        }
    }

    private void RemoveHobbyList(string hobby)
    {
        this.accountModel.Hobby.Remove(hobby);
        this.hobbyName = string.Empty;
    }
}
